DEFINE pop_eax 58
DEFINE pop_ebx 5B
DEFINE pop_ecx 59
DEFINE pop_edx 5A
DEFINE pop_edi 5F
DEFINE push_eax 50
DEFINE push_ebx 53
DEFINE push_edi 57
DEFINE mov_eax, B8
DEFINE mov_ebx, BB
DEFINE mov_edx, BA
DEFINE mov_eax,[DWORD] 8B05
DEFINE mov_ebx,[DWORD] 8B1D
DEFINE mov_eax,ebx 89D8
DEFINE mov_eax,edx 89D0
DEFINE mov_edx,eax 89C2
DEFINE mov_ebx,eax 89C3
DEFINE mov_ecx,eax 89C1
DEFINE mov_ebp,eax 89C5
DEFINE mov_al,[eax] 8A00
DEFINE mov_eax,[eax] 8B00
DEFINE mov_ebx,[ebp] 8B5D00
DEFINE mov_eax,[ebp+DWORD] 8B85 
DEFINE lea_eax,[ebp+DWORD] 8D85
DEFINE lea_ecx,[ebp+DWORD] 8D8D
DEFINE mov_[DWORD],eax A3
DEFINE mov_[DWORD],ebx 891D
DEFINE mov_[ecx],eax 8901
DEFINE mov_[eax],ebx 8918
DEFINE mov_[ebx],al 8803
DEFINE mov_[ebx],eax 8903
DEFINE mov_[ebp],eax 894500
DEFINE mov_[eax],bl 8818
DEFINE add_eax, 81C0
DEFINE add_eax,ebx 01D8
DEFINE add_ebx,eax 01C3
DEFINE sub_ebx,eax 29C3
DEFINE shl_eax,cl D3E0
DEFINE shr_eax,cl D3E8
DEFINE cdq 99
DEFINE imul_eax,ebx 0FAFC3
DEFINE idiv_ebx F7FB
DEFINE and_eax, 25
DEFINE add_ebp, 81C5
DEFINE sub_ebp, 81ED
DEFINE cmp_eax_ebx 39C3
DEFINE seta_al 0F97C0
DEFINE setae_al 0F93C0
DEFINE setb_al 0F92C0
DEFINE setbe_al 0F96C0
DEFINE sete_al 0F94C0
DEFINE setle_al 0F9EC0
DEFINE setl_al 0F9CC0
DEFINE setge_al 0F9DC0
DEFINE setg_al 0F9FC0
DEFINE setne_al 0F95C0
DEFINE movzx_eax,al 0FB6C0
DEFINE test_eax,eax 85C0
DEFINE jmp E9
DEFINE je 0F84
DEFINE jne 0F85
DEFINE jle 0F8E
DEFINE call E8
DEFINE call_eax FFD0
DEFINE ret C3
DEFINE int_80 CD80
DEFINE NULL 00000000

:ELF_text

:_start
    mov_eax, %45                                # the Syscall # for SYS_BRK
    mov_ebx, %0                                 # Get current brk
    int_80                                      # Let the kernel do the work
    mov_[DWORD],eax &SYS_MALLOC                 # Set our malloc pointer

    mov_eax, %10000
    push_eax                                    # (sys_malloc assums address)
    call %sys_malloc
    mov_ebp,eax
    
    pop_eax
    call %main
    
    # program completed Successfully
    mov_ebx,eax                                 # All is well
    mov_eax, %1                                 # put the exit syscall number in eax
    int_80                                      # Call it a good day

# These sys_ function follow the same calling conventions
# as all the other functions. To access the arguments on the stack
# the return address is stored in the edi address (which is only possible
# because these functions do not call other function) and the function
# address (which is stored in the eax register, the top of the stack)
# needs to be pop as well.

:sys_int80
    pop_edi               # Save return address from the stack
    pop_edx               # Get the arguments from the stack
    pop_ecx
    pop_ebx
    pop_eax
    int_80                # call the Kernel
    push_edi              # restore return address to the stack
    ret

:sys_malloc
    pop_edi
    pop_eax
    mov_ebx,[DWORD] &SYS_MALLOC                 # Using the current pointer
    add_ebx,eax                                 # Request the number of desired bytes
    mov_eax, %45                                # the Syscall # for SYS_BRK
    int_80                                      # call the Kernel
    mov_eax,[DWORD] &SYS_MALLOC                 # Return pointer
    mov_[DWORD],ebx &SYS_MALLOC                 # Update pointer
    push_edi
    ret
:SYS_MALLOC
    NULL

    
